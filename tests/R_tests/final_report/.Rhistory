update.packages(ask = FALSE)
rmarkdown::render("final_report.Rmd", clean = TRUE)
rmarkdown::render("final_report.Rmd", clean = TRUE)
rmarkdown::render("final_report.Rmd", clean = TRUE)
rmarkdown::render("final_report.Rmd", clean = TRUE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
out.width = "90%", fig.align = "center")
if (!require(tidyverse)) install.packages('tidyverse', dependencies = TRUE)
suppressWarnings(suppressMessages(library(tidyverse)))
if (!require(jsonlite)) install.packages('jsonlite', dependencies = TRUE)
suppressWarnings(suppressMessages(library(jsonlite)))
if (!require(Dict)) install.packages('Dict', dependencies = TRUE)
suppressWarnings(suppressMessages(library(Dict)))
if (!require(RColorBrewer)) install.packages('RColorBrewer', dependencies = TRUE)
suppressWarnings(suppressMessages(library(RColorBrewer)))
if (!require(viridis)) install.packages('viridis', dependencies = TRUE)
suppressWarnings(suppressMessages(library(viridis)))
if (!require(hrbrthemes)) install.packages('hrbrthemes', dependencies = TRUE)
suppressWarnings(suppressMessages(library(hrbrthemes)))
# GPA Graph
g1 <- numerical_col_graph(dataset, gpa, "GPA", 201)
ggsave("gpa.png", g1)
# Student Semester graph
g2 <- numerical_col_graph(dataset, student_semester, "Student Semester", 15)
ggsave("student_semester.png", g2)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
out.width = "90%", fig.align = "center")
if (!require(tidyverse)) install.packages('tidyverse', dependencies = TRUE)
suppressWarnings(suppressMessages(library(tidyverse)))
if (!require(gridExtra)) install.packages('gridExtra', dependencies = TRUE)
suppressWarnings(suppressMessages(library(gridExtra)))
if (!require(jsonlite)) install.packages('jsonlite', dependencies = TRUE)
suppressWarnings(suppressMessages(library(jsonlite)))
if (!require(Dict)) install.packages('Dict', dependencies = TRUE)
suppressWarnings(suppressMessages(library(Dict)))
if (!require(RColorBrewer)) install.packages('RColorBrewer', dependencies = TRUE)
suppressWarnings(suppressMessages(library(RColorBrewer)))
if (!require(viridis)) install.packages('viridis', dependencies = TRUE)
suppressWarnings(suppressMessages(library(viridis)))
if (!require(hrbrthemes)) install.packages('hrbrthemes', dependencies = TRUE)
suppressWarnings(suppressMessages(library(hrbrthemes)))
if (!require(ggpubr)) install.packages('ggpubr', dependencies = TRUE)
suppressWarnings(suppressMessages(library(ggpubr)))
# Ethnoracial Group vs Gender Graph
g0 <- correlation_graph("Ethnoracial Group", "Gender")
ggsave("ethnoracial_group_v_gender.png", g0)
# Ethnoracial Group vs International Student Status Graph
g1 <- correlation_graph("Ethnoracial Group", "International Student Status")
ggsave("ethnoracial_group_v_international_student_status.png", g1)
# Ethnoracial Group vs Socioeconomic Status Graph
g2 <- correlation_graph("Ethnoracial Group", "Socioeconomic Status")
ggsave("ethnoracial_group_v_socioeconomic_status.png", g2)
# Gender vs International Student Status Graph
g3 <- correlation_graph("International Student Status", "Gender")
ggsave("gender_v_international_student_status.png", g3)
# Gender vs Socioeconomic Status Graph
g4 <- correlation_graph("Gender", "Socioeconomic Status")
ggsave("gender_v_socioeconomic_status.png", g4)
# International Student Status vs Socioeconomic Status Graph
g5 <- correlation_graph("International Student Status", "Socioeconomic Status")
ggsave("international_student_status_v_socioeconomic_status.png", g5)
combined_dem_graph <- ggarrange(g0,g1,g2,g3,g4,g5, ncol = 3, labels = c("Ethnoracial Group vs Gender","Ethnoracial Group vs International Student Status", "Ethnoracial Group vs Socioeconomic Status", "Gender vs International Student Status", "Gender vs Socioeconomic Status", "International Student Status vs Socioeconomic Status"))
ggsave("combined_dem_graph.png", combined_dem_graph)
combined_dem_graph
# Combine the graphs
combined_dem_graph <- ggarrange(g0,g1,g2,g3,g4,g5, ncol = 2, labels = c("Ethnoracial Group vs Gender","Ethnoracial Group vs International Student Status", "Ethnoracial Group vs Socioeconomic Status", "Gender vs International Student Status", "Gender vs Socioeconomic Status", "International Student Status vs Socioeconomic Status"))
combined_dem_graph
View(g0)
View(dataset)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
out.width = "90%", fig.align = "center")
if (!require(tidyverse)) install.packages('tidyverse', dependencies = TRUE)
suppressWarnings(suppressMessages(library(tidyverse)))
if (!require(jsonlite)) install.packages('jsonlite', dependencies = TRUE)
suppressWarnings(suppressMessages(library(jsonlite)))
if (!require(Dict)) install.packages('Dict', dependencies = TRUE)
suppressWarnings(suppressMessages(library(Dict)))
if (!require(RColorBrewer)) install.packages('RColorBrewer', dependencies = TRUE)
suppressWarnings(suppressMessages(library(RColorBrewer)))
if (!require(viridis)) install.packages('viridis', dependencies = TRUE)
suppressWarnings(suppressMessages(library(viridis)))
if (!require(hrbrthemes)) install.packages('hrbrthemes', dependencies = TRUE)
suppressWarnings(suppressMessages(library(hrbrthemes)))
# Bring in the Majors Dataset which contains real world statistics
majors_data <- fromJSON("majors.json", flatten = TRUE)
# Rename the columns and convert the strings to numerical values and factors
majors_data <- as.data.frame(majors_data) |>
rename(major = V1) |>
rename(national_percent_female = V2) |>
mutate(national_percent_female = as.numeric(national_percent_female) / 100) |>
# Divide by 100 since the values are between 1 and 100 not 0 and 1
rename(national_popularity_ranking = V3) |>
mutate(national_popularity_ranking = as.numeric(national_popularity_ranking)) |>
rename(division = V4) |>
mutate(division = as.factor(division)) |>
rename(top_5_careers = V5) |>
mutate(top_5_careers = str_remove_all(top_5_careers, "[\'\\[\\]]"))
# Make the Major Demographics Dataset and join it to the Majors Data dataset
majors_demographics <- make_demographic_dataframe(dataset_split, c("major_1", "major_2"), "major", rm.na = TRUE) |>
group_by(major) |>
mutate(major = case_when(major == "" ~ NA, .default = major)) |>
ungroup()
# Create the Major Counts Dataset
major_counts <- majors_demographics |>
group_by(major) |>
drop_na() |>
summarize(major_count = n()) |>
ungroup()
# Add in the Majors Data to the Majors Counts Dataset
major_counts <- major_counts |>
left_join(majors_data, by = join_by(major)) |>
arrange(desc(major_count))
# Add in the observed popularity rankings to the Major Counts Dataset
popularity_ranking <- c(1:length(major_counts$major))
major_counts <- cbind(major_counts, popularity_ranking)
# Join Major Counts to Majors Demographics
majors_demographics <- majors_demographics |>
left_join(major_counts, by = join_by(major)) |>
arrange(desc(major_count))
# Plot the Top 10 Majors
top_major_graph <- ggplot(major_counts[1:10,], aes(x = reorder(major, major_count, FUN = function(x) sum(x)),
y = major_count,
fill = division)) +
coord_flip() +
theme_classic() +
scale_fill_viridis(discrete=TRUE) +
geom_bar(stat = "identity") +
labs(x = "Size of Major",
y = "Most Popular Majors",
fill = "Major Division")
ggsave("top_major_graph.png", top_major_graph)
# Observed vs Expected Major Popularity
obs_vs_exp_majors <- major_counts |>
ggplot(aes(x = popularity_ranking,
y = national_popularity_ranking,
color = division)) +
geom_point() +
theme_classic() +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
labs(x = "Observed Major Popularity Ranking",
y = "Expected Major Popularity Ranking",
color = "Major Division")
ggsave("obs_vs_exp_majors.png", obs_vs_exp_majors)
# Calculate the Regression line
reg<-lm(national_percent_female ~ percent_female, data = gender_by_major)
# Bring in the Majors Dataset which contains real world statistics
majors_data <- fromJSON("majors.json", flatten = TRUE)
# Rename the columns and convert the strings to numerical values and factors
majors_data <- as.data.frame(majors_data) |>
rename(major = V1) |>
rename(national_percent_female = V2) |>
mutate(national_percent_female = as.numeric(national_percent_female) / 100) |>
# Divide by 100 since the values are between 1 and 100 not 0 and 1
rename(national_popularity_ranking = V3) |>
mutate(national_popularity_ranking = as.numeric(national_popularity_ranking)) |>
rename(division = V4) |>
mutate(division = as.factor(division)) |>
rename(top_5_careers = V5) |>
mutate(top_5_careers = str_remove_all(top_5_careers, "[\'\\[\\]]"))
# Make the Major Demographics Dataset and join it to the Majors Data dataset
majors_demographics <- make_demographic_dataframe(dataset_split, c("major_1", "major_2"), "major", rm.na = TRUE) |>
group_by(major) |>
mutate(major = case_when(major == "" ~ NA, .default = major)) |>
ungroup()
# Create the Major Counts Dataset
major_counts <- majors_demographics |>
group_by(major) |>
drop_na() |>
summarize(major_count = n()) |>
ungroup()
# Add in the Majors Data to the Majors Counts Dataset
major_counts <- major_counts |>
left_join(majors_data, by = join_by(major)) |>
arrange(desc(major_count))
# Add in the observed popularity rankings to the Major Counts Dataset
popularity_ranking <- c(1:length(major_counts$major))
major_counts <- cbind(major_counts, popularity_ranking)
# Join Major Counts to Majors Demographics
majors_demographics <- majors_demographics |>
left_join(major_counts, by = join_by(major)) |>
arrange(desc(major_count))
# Plot the Top 10 Majors
top_major_graph <- ggplot(major_counts[1:10,], aes(x = reorder(major, major_count, FUN = function(x) sum(x)),
y = major_count,
fill = division)) +
coord_flip() +
theme_classic() +
scale_fill_viridis(discrete=TRUE) +
geom_bar(stat = "identity") +
labs(x = "Size of Major",
y = "Most Popular Majors",
fill = "Major Division")
ggsave("top_major_graph.png", top_major_graph)
# Observed vs Expected Major Popularity
obs_vs_exp_majors <- major_counts |>
ggplot(aes(x = popularity_ranking,
y = national_popularity_ranking,
color = division)) +
geom_point() +
theme_classic() +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
labs(x = "Observed Major Popularity Ranking",
y = "Expected Major Popularity Ranking",
color = "Major Division")
ggsave("obs_vs_exp_majors.png", obs_vs_exp_majors)
# Make the Gender by Major Dataset
gender_by_major <- majors_demographics[,c(2,5)] |>
group_by(major) |>
mutate(percent_male = sum(gender == "Male")/n()) |>
mutate(percent_female = sum(gender == "Female")/n()) |>
mutate(percent_nonbinary = sum(gender == "Nonbinary")/n()) |>
mutate(percent_gender_minority = 1-percent_male) |>
distinct(major, .keep_all = TRUE) |>
ungroup() |>
select(-gender) |>
drop_na() |>
arrange(major) |>
# Join the Major Counts dataset
left_join(major_counts, join_by(major))
# Calculate the Regression line
reg<-lm(national_percent_female ~ percent_female, data = gender_by_major)
# Observed vs Expected Percent Female per Major
obs_vs_exp_gxm <- gender_by_major |>
mutate(percent_female = round(percent_female, 3)) |>
# Make ggplot
ggplot(aes(x = percent_female,
y = national_percent_female,
color = division,
text=text)) +
geom_point() +
theme_classic() +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
labs(x = "Observed Percent Female",
y = "Expected Percent Female",
color = "Major Division") +
# Add line for y=x, the expected regression line
geom_abline(intercept = 0, slope = 1,
color="gray",
linetype="dashed") +
# Add line for the observed regression line
geom_abline(intercept = reg$coefficients[1], slope = reg$coefficients[2],
color="black",
linetype="dashed")+
xlim(0,1) +
ylim(0,1)
ggsave("obs_vs_exp_gxm.png", obs_vs_exp_gxm)
# Bring in the Majors Dataset which contains real world statistics
majors_data <- fromJSON("majors.json", flatten = TRUE)
# Rename the columns and convert the strings to numerical values and factors
majors_data <- as.data.frame(majors_data) |>
rename(major = V1) |>
rename(national_percent_female = V2) |>
mutate(national_percent_female = as.numeric(national_percent_female) / 100) |>
# Divide by 100 since the values are between 1 and 100 not 0 and 1
rename(national_popularity_ranking = V3) |>
mutate(national_popularity_ranking = as.numeric(national_popularity_ranking)) |>
rename(division = V4) |>
mutate(division = as.factor(division)) |>
rename(top_5_careers = V5) |>
mutate(top_5_careers = str_remove_all(top_5_careers, "[\'\\[\\]]"))
# Make the Major Demographics Dataset and join it to the Majors Data dataset
majors_demographics <- make_demographic_dataframe(dataset_split, c("major_1", "major_2"), "major", rm.na = TRUE) |>
group_by(major) |>
mutate(major = case_when(major == "" ~ NA, .default = major)) |>
ungroup()
# Create the Major Counts Dataset
major_counts <- majors_demographics |>
group_by(major) |>
drop_na() |>
summarize(major_count = n()) |>
ungroup()
# Add in the Majors Data to the Majors Counts Dataset
major_counts <- major_counts |>
left_join(majors_data, by = join_by(major)) |>
arrange(desc(major_count))
# Add in the observed popularity rankings to the Major Counts Dataset
popularity_ranking <- c(1:length(major_counts$major))
major_counts <- cbind(major_counts, popularity_ranking)
# Join Major Counts to Majors Demographics
majors_demographics <- majors_demographics |>
left_join(major_counts, by = join_by(major)) |>
arrange(desc(major_count))
# Plot the Top 10 Majors
top_major_graph <- ggplot(major_counts[1:10,], aes(x = reorder(major, major_count, FUN = function(x) sum(x)),
y = major_count,
fill = division)) +
coord_flip() +
theme_classic() +
scale_fill_viridis(discrete=TRUE) +
geom_bar(stat = "identity") +
labs(x = "Size of Major",
y = "Most Popular Majors",
fill = "Major Division")
ggsave("top_major_graph.png", top_major_graph)
# Observed vs Expected Major Popularity
obs_vs_exp_majors <- major_counts |>
ggplot(aes(x = popularity_ranking,
y = national_popularity_ranking,
color = division)) +
geom_point() +
theme_classic() +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
labs(x = "Observed Major Popularity Ranking",
y = "Expected Major Popularity Ranking",
color = "Major Division")
ggsave("obs_vs_exp_majors.png", obs_vs_exp_majors)
# Make the Gender by Major Dataset
gender_by_major <- majors_demographics[,c(2,5)] |>
group_by(major) |>
mutate(percent_male = sum(gender == "Male")/n()) |>
mutate(percent_female = sum(gender == "Female")/n()) |>
mutate(percent_nonbinary = sum(gender == "Nonbinary")/n()) |>
mutate(percent_gender_minority = 1-percent_male) |>
distinct(major, .keep_all = TRUE) |>
ungroup() |>
select(-gender) |>
drop_na() |>
arrange(major) |>
# Join the Major Counts dataset
left_join(major_counts, join_by(major))
# Calculate the Regression line
reg<-lm(national_percent_female ~ percent_female, data = gender_by_major)
# Observed vs Expected Percent Female per Major
obs_vs_exp_gxm <- gender_by_major |>
mutate(percent_female = round(percent_female, 3)) |>
# Make ggplot
ggplot(aes(x = percent_female,
y = national_percent_female,
color = division)) +
geom_point() +
theme_classic() +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
labs(x = "Observed Percent Female",
y = "Expected Percent Female",
color = "Major Division") +
# Add line for y=x, the expected regression line
geom_abline(intercept = 0, slope = 1,
color="gray",
linetype="dashed") +
# Add line for the observed regression line
geom_abline(intercept = reg$coefficients[1], slope = reg$coefficients[2],
color="black",
linetype="dashed")+
xlim(0,1) +
ylim(0,1)
ggsave("obs_vs_exp_gxm.png", obs_vs_exp_gxm)
reg
obs_vs_exp_gxm_major_size <- gender_by_major |>
mutate(percent_female = round(percent_female, 3)) |>
# Reorder majors to having big bubbles on top
arrange(desc(major_count)) |>
mutate(major = factor(major, major)) |>
# Create ggplot
ggplot( aes(x=percent_female,
y=national_percent_female,
size = major_count,
color = division)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Number of Majors") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
labs(x = "Observed Percent Female",
y = "Expected Percent Female") +
xlim(0,1) +
ylim(0,1)
ggsave("obs_vs_exp_gxm_major_size.png", obs_vs_exp_gxm_major_size)
obs_vs_exp_gxm_major_size
obs_vs_exp_gxm_major_size <- gender_by_major |>
mutate(percent_female = round(percent_female, 3)) |>
# Reorder majors to having big bubbles on top
arrange(desc(major_count)) |>
mutate(major = factor(major, major)) |>
# Create ggplot
ggplot( aes(x=percent_female,
y=national_percent_female,
size = major_count)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Number of Majors") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
labs(x = "Observed Percent Female",
y = "Expected Percent Female") +
xlim(0,1) +
ylim(0,1)
obs_vs_exp_gxm_major_size
knitr::include_graphics("obs_vs_exp_gxm_major_size.png")
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
View(major_gender_dominated_graph)
